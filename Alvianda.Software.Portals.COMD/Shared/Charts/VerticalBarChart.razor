@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using ChartJs.Blazor.Charts;
@using ChartJs.Blazor.ChartJS.PieChart;
@using ChartJs.Blazor.ChartJS.BarChart;
@using ChartJs.Blazor.ChartJS.Common.Properties;
@using ChartJs.Blazor.ChartJS.Common.Enums;
@using TData = ChartJs.Blazor.ChartJS.Common.Wrappers;
@using ChartJs.Blazor.Util;
@using Microsoft.Extensions.Configuration;
@using System.Net.Http;
@using System.Net.Http.Json;
@using ChartJs.Blazor.ChartJS.Common;
@using System.Security.Cryptography.X509Certificates;
@using ChartJs.Blazor.ChartJS.BubbleChart;
@using ChartJs.Blazor.ChartJS.BarChart.Axes;
@using ChartJs.Blazor.ChartJS.Common.Axes;
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks;

<div>
    <ChartJsBarChart @ref="_barChart" Config="@_barChartConfig" Labels="@_labels" Values="@_values" Title="@_chartTitle" Name="@_name" Width="600" Height="300" />
    @*<HorizontalBarChart />*@
</div>

@code {
    private BarConfig _barChartConfig;
    private ChartJs.Blazor.Charts.ChartJsBarChart _barChart;
    private BarDataset<TData.DoubleWrapper> _barDataSet;
    private IList<string> _labels;
    private IList<double> _values;
    private string _chartTitle;
    private string _name;

    protected override Task OnInitializedAsync()
    {
        // Note the constructor argument
        _barChartConfig = new BarConfig(ChartType.HorizontalBar)
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = new IndexableOption<string>(_chartTitle)
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                                    {
                                        new BarCategoryAxis
                                        {
                                            BarPercentage = 0.5,
                                            BarThickness = BarThickness.Flex
                                        }
                                    },
                    YAxes = new List<CartesianAxis>
                                    {
                                        new BarLinearCartesianAxis
                                        {
                                            Ticks = new LinearCartesianTicks
                                            {
                                                BeginAtZero = false
                                                //SuggestedMax = (int?)values.Max(),
                                                //SuggestedMin = (int?)values.Min()
                                            }
                                        }
                                    }
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _barConfig.Data.Labels.AddRange(_labels);

        var colorList = new List<string>();
        _labels.ToList().ForEach(x => colorList.Add(ColorUtil.RandomColorString()));
        
        var _barDataSet = new BarDataset<TData.DoubleWrapper>(ChartType.Bar)
        {
            Label = $"Data points for {_name}",
            BackgroundColor = colorList.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        var xlstvals = new TData.DoubleWrapper[_values.Count];
        int i = 0;
        _values.ToList().ForEach(x => { xlstvals[i++] = x; });

        _barDataSet.AddRange(xlstvals);
        _barConfig.Data.Datasets.Add(_barDataSet);

        return Task.CompletedTask;
    }

}
